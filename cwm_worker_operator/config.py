import os
import json

DEBUG = os.environ.get("DEBUG") == "yes" or os.environ.get("ENABLE_DEBUG") == "yes"

# higher numbers = more debug logs
DEBUG_VERBOSITY = int(os.environ.get("DEBUG_VERBOSITY") or "10")

_default_redis_host = os.environ.get("REDIS_HOST") or "localhost"
_default_redis_port = int(os.environ.get("REDIS_PORT") or "6379")
_default_redis_pool_max_connections = int(os.environ.get("REDIS_POOL_MAX_CONNECTIONS") or "200")
_default_redis_pool_timeout = int(os.environ.get("REDIS_POOL_TIMEOUT") or "5")

INGRESS_REDIS_HOST = os.environ.get("INGRESS_REDIS_HOST") or _default_redis_host
INGRESS_REDIS_PORT = int(os.environ.get("INGRESS_REDIS_PORT") or _default_redis_port)
INGRESS_REDIS_POOL_MAX_CONNECTIONS = int(os.environ.get("INGRESS_REDIS_POOL_MAX_CONNECTIONS") or _default_redis_pool_max_connections)
INGRESS_REDIS_POOL_TIMEOUT = int(os.environ.get("INGRESS_REDIS_POOL_TIMEOUT") or _default_redis_pool_timeout)
INGRESS_REDIS_DB = int(os.environ.get("INGRESS_REDIS_DB", "0"))

INTERNAL_REDIS_HOST = os.environ.get("INTERNAL_REDIS_HOST") or _default_redis_host
INTERNAL_REDIS_PORT = int(os.environ.get("INTERNAL_REDIS_PORT") or _default_redis_port)
INTERNAL_REDIS_POOL_MAX_CONNECTIONS = int(os.environ.get("INTERNAL_REDIS_POOL_MAX_CONNECTIONS") or _default_redis_pool_max_connections)
INTERNAL_REDIS_POOL_TIMEOUT = int(os.environ.get("INTERNAL_REDIS_POOL_TIMEOUT") or _default_redis_pool_timeout)
INTERNAL_REDIS_DB = int(os.environ.get("INTERNAL_REDIS_DB", "1"))

METRICS_REDIS_HOST = os.environ.get("METRICS_REDIS_HOST") or _default_redis_host
METRICS_REDIS_PORT = int(os.environ.get("METRICS_REDIS_PORT") or _default_redis_port)
METRICS_REDIS_POOL_MAX_CONNECTIONS = int(os.environ.get("METRICS_REDIS_POOL_MAX_CONNECTIONS") or _default_redis_pool_max_connections)
METRICS_REDIS_POOL_TIMEOUT = int(os.environ.get("METRICS_REDIS_POOL_TIMEOUT") or _default_redis_pool_timeout)
METRICS_REDIS_DB = int(os.environ.get("METRICS_REDIS_DB", "2"))

CWM_API_URL = os.environ["CWM_API_URL"]
CWM_API_KEY = os.environ["CWM_API_KEY"]
CWM_API_SECRET = os.environ["CWM_API_SECRET"]
CWM_ZONE = os.environ["CWM_ZONE"]
CWM_ADDITIONAL_ZONES = [z.strip() for z in (os.environ.get("CWM_ADDITIONAL_ZONES") or '').split(',') if z.strip()]
CWM_API_VOLUME_CONFIG_VERSION = os.environ.get('CWM_API_VOLUME_CONFIG_VERSION') or '2.0.1'

VOLUME_CONFIG_OVERRIDE_URL = os.environ.get('VOLUME_CONFIG_OVERRIDE_URL')
VOLUME_CONFIG_OVERRIDE_USERNAME = os.environ.get('VOLUME_CONFIG_OVERRIDE_USERNAME')
VOLUME_CONFIG_OVERRIDE_PASSWORD = os.environ.get('VOLUME_CONFIG_OVERRIDE_PASSWORD')

INITIALIZER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = float(os.environ.get("INITIALIZER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS") or "0.001")

DEPLOYER_WAIT_DEPLOYMENT_READY_MAX_SECONDS = float(os.environ.get("DEPLOYER_WAIT_DEPLOYMENT_READY_MAX_SECONDS") or "10.0")
DEPLOYER_WAIT_DEPLOYMENT_ERROR_MAX_SECONDS = float(os.environ.get("DEPLOYER_WAIT_DEPLOYMENT_ERROR_MAX_SECONDS") or "2.0")
DEPLOYER_MAX_ATTEMPT_NUMBERS = int(os.environ.get('DEPLOYER_MAX_ATTEMPT_NUMBERS') or "10")
DEPLOYER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = float(os.environ.get("DEPLOYER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS") or "0.01")

WORKER_ERROR_MAX_ATTEMPTS = int(os.environ.get("WORKER_ERROR_MAX_ATTEMPTS", "5"))

WAITER_VERIFY_WORKER_ACCESS = (os.environ.get("WAITER_VERIFY_WORKER_ACCESS") or "yes") == "yes"
WAITER_MAX_PARALLEL_DEPLOY_PROCESSES = int(os.environ.get('WAITER_MAX_PARALLEL_DEPLOY_PROCESSES') or '2')

CACHE_MINIO_VERSIONS = [v.strip() for v in (os.environ.get("CACHE_MINIO_VERSIONS") or "").split(",") if v and v.strip()]
CWM_WORKER_DEPLOYMENT_EXTRA_CONFIG = json.loads(os.environ.get("CWM_WORKER_DEPLOYMENT_EXTRA_CONFIG_JSON") or '{}')
MINIO_EXTRA_CONFIG = json.loads(os.environ.get("MINIO_EXTRA_CONFIG_JSON") or '{}')
CWM_WORKER_EXTRA_OBJECTS = json.loads(os.environ.get("CWM_WORKER_EXTRA_OBJECTS_JSON") or '[]')

PROMETHEUS_METRICS_PORT_INITIALIZER = int(os.environ.get("PROMETHEUS_METRICS_PORT_INITIALIZER") or "8081")
PROMETHEUS_METRICS_PORT_DEPLOYER = int(os.environ.get("PROMETHEUS_METRICS_PORT_DEPLOYER") or "8082")
PROMETHEUS_METRICS_PORT_WAITER = int(os.environ.get("PROMETHEUS_METRICS_PORT_WAITER") or "8083")
PROMETHEUS_METRICS_PORT_DELETER = int(os.environ.get("PROMETHEUS_METRICS_PORT_DELETER") or "8084")
PROMETHEUS_METRICS_PORT_UPDATER = int(os.environ.get("PROMETHEUS_METRICS_PORT_UPDATER") or "8085")
PROMETHEUS_METRICS_PORT_METRICS_UPDATER = int(os.environ.get("PROMETHEUS_METRICS_PORT_METRICS_UPDATER") or "8086")
PROMETHEUS_METRICS_PORT_DISK_USAGE_UPDATER = int(os.environ.get("PROMETHEUS_METRICS_PORT_DISK_USAGE_UPDATER") or "8087")
PROMETHEUS_METRICS_PORT_NAS_CHECKER = int(os.environ.get("PROMETHEUS_METRICS_PORT_NAS_CHECKER") or "8088")
PROMETHEUS_METRICS_PORT_WORKERS_CHECKER = int(os.environ.get("PROMETHEUS_METRICS_PORT_WORKERS_CHECKER") or "8089")
PROMETHEUS_METRICS_WITH_IDENTIFIER = os.environ.get("PROMETHEUS_METRICS_WITH_IDENTIFIER") == "yes"

DELETER_DEFAULT_DELETE_NAMESPACE = os.environ.get("DELETER_DEFAULT_DELETE_NAMESPACE") == "yes"
DELETER_DEFAULT_DELETE_HELM = (os.environ.get("DELETER_DEFAULT_DELETE_HELM") or "yes") == "yes"
DELETER_DATA_DELETE_CONFIG = json.loads(os.environ.get("DELETER_DATA_DELETE_CONFIG_JSON") or '{}')

DEPLOYER_USE_EXTERNAL_SERVICE = os.environ.get("DEPLOYER_USE_EXTERNAL_SERVICE") == "yes"
DEPLOYER_USE_EXTERNAL_EXTRA_OBJECTS = os.environ.get("DEPLOYER_USE_EXTERNAL_EXTRA_OBJECTS") == "yes"
DEPLOYER_MAX_PARALLEL_DEPLOY_PROCESSES = int(os.environ.get("DEPLOYER_MAX_PARALLEL_DEPLOY_PROCESSES") or "2")

DELETER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = float(os.environ.get("DELETER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS") or "1")
UPDATER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = float(os.environ.get("UPDATER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS") or "5")
FORCE_UPDATE_MAX_HOURS_TTL = float(os.environ.get("FORCE_UPDATE_MAX_HOURS_TTL") or "24")
FORCE_DELETE_GRACE_PERIOD_HOURS = float(os.environ.get("FORCE_DELETE_GRACE_PERIOD_HOURS") or "1")

LAST_ACTION_LOGGER_UPDATE_GRACE_PERIOD_SECONDS = int(os.environ.get("LAST_ACTION_LOGGER_UPDATE_GRACE_PERIOD_SECONDS") or "300")
METRICS_LOGGER_DEPLOYMENT_API_METRICS_FLUSH_INTERVAL_SECONDS = int(os.environ.get("METRICS_LOGGER_DEPLOYMENT_API_METRICS_FLUSH_INTERVAL_SECONDS") or "300")

METRICS_UPDATER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get("METRICS_UPDATER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS") or "1")

FORCE_DELETE_IF_NO_ACTION_FOR_MINUTES = int(os.environ.get('FORCE_DELETE_IF_NO_ACTION_FOR_MINUTES') or '30')

WEB_UI_PORT = int(os.environ.get("WEB_UI_PORT") or '8182')

DISK_USAGE_UPDATER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get("DISK_USAGE_UPDATER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS") or "30")
DISK_USAGE_UPDATER_NFS_SERVER = os.environ.get("DISK_USAGE_UPDATER_NFS_SERVER") or "cwm-nfs"
DISK_USAGE_UPDATER_NFS_ROOT_PATH = os.environ.get("DISK_USAGE_UPDATER_NFS_ROOT_PATH") or "/ganesha-ceph/eu-vobjstore001"

ALERTER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get("ALERTER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS") or "15")
ALERTER_SLACK_WEBHOOK_URL = os.environ.get("ALERTER_SLACK_WEBHOOK_URL")
ALERTER_MESSAGE_PREFIX = os.environ.get("ALERTER_MESSAGE_PREFIX")

CLEANER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get("CLEANER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS") or "300")

NODES_CHECKER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get("NODES_CHECKER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS") or "60")
DNS_RECORDS_PREFIX = os.environ.get("DNS_RECORDS_PREFIX") or "cwmc-operator-test"
AWS_ROUTE53_HOSTEDZONE_ID = os.environ.get("AWS_ROUTE53_HOSTEDZONE_ID") or ""
AWS_ROUTE53_HOSTEDZONE_DOMAIN = os.environ.get("AWS_ROUTE53_HOSTEDZONE_DOMAIN") or "example.com"

DUMMY_TEST_WORKER_ID = os.environ.get('DUMMY_TEST_WORKER_ID') or 'cwdummytst'
DUMMY_TEST_HOSTNAME = os.environ.get('DUMMY_TEST_HOSTNAME') or 'cwdummytst.example007.com'

MOCK_GATEWAYS = json.loads(os.environ.get('MOCK_GATEWAYS') or '{}')

DEPLOYER_WITH_HELM_DRY_RUN = os.environ.get('DEPLOYER_WITH_HELM_DRY_RUN') == 'yes'

CLEAR_CACHER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get('CLEAR_CACHER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS') or '5')

UPDATER_DEFAULT_LAST_UPDATE_DATETIME_SECONDS = int(os.environ.get('UPDATER_DEFAULT_LAST_UPDATE_DATETIME_SECONDS') or '7200')
UPDATER_MAX_PARALLEL_DEPLOY_PROCESSES = int(os.environ.get('UPDATER_MAX_PARALLEL_DEPLOY_PROCESSES') or '2')

DHPARAM_KEY = os.environ.get('DHPARAM_KEY') or '-----BEGIN DH PARAMETERS-----\nMIIBCAKCAQEAuueQU6VmApLtG08PRJiq5nBrBPoieQ0MhAI3jZAuahu0AnQ/nnio\naIfCvnnwilebPID8/a9iFzzqkcZWwAK/OaYn2p6t/9mfyYFVkWI394rCXTjXp8qa\nl5fl0cEzQT5erIi+UKKjFw1jirmigriLPzM+JvZUTzvkpeI7QNiFirg6Oq6IZiM+\n+sIqeaCWA3ughSIzcKQ/w6qNjPTrDHbxc41AZS1o5xzngmMGHBl0Nw7kvd0b6tZN\nI1ZLzZKeEApAE5f8z8eDdGXDbHaCd7bs9qhak7xUQNs8wEomV8F8rYDBnCwAKZSD\nLsHbKShgAFY7jHqIwkMm3N89kIqkQgrswwIBAg==\n-----END DH PARAMETERS-----'

NAS_CHECKER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get('NAS_CHECKER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS') or '5')
NAS_IPS = [i.strip() for i in os.environ['NAS_IPS'].split(',') if i.strip()] if os.environ.get('NAS_IPS') else [
    # values for testing
    '1.2.3.4', '5.6.7.8'
]
NAS_CHECKER_VOLUME_TEMPLATE_JSON = os.environ.get('NAS_CHECKER_VOLUME_TEMPLATE_JSON') or '{"emptyDir": {}}'
NAS_CHECKER_WITH_KUBELET_LOGS = os.environ.get('NAS_CHECKER_WITH_KUBELET_LOGS') == 'yes'
NAS_CHECKER_NAMESPACE = os.environ.get('NAS_CHECKER_NAMESPACE') or 'default'

LOCAL_STORAGE_PATH = os.environ.get('LOCAL_STORAGE_PATH')
if not LOCAL_STORAGE_PATH:
    LOCAL_STORAGE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '.data'))

REDIS_CLEANER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get('REDIS_CLEANER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS') or '60')
REDIS_CLEANER_DELETE_FAILED_TO_DEPLOY_HOSTNAME_ERROR_MIN_SECONDS = int(os.environ.get('REDIS_CLEANER_DELETE_FAILED_TO_DEPLOY_HOSTNAME_ERROR_MIN_SECONDS') or '120')
REDIS_CLEANER_DELETE_ANY_HOSTNAME_ERROR_MIN_SECONDS = int(os.environ.get('REDIS_CLEANER_DELETE_ANY_HOSTNAME_ERROR_MIN_SECONDS') or '7200')

WORKERS_CHECKER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get('WORKERS_CHECKER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS') or '5')
WORKERS_CHECKER_MAX_PARALLEL_DEPLOY_PROCESSES = int(os.environ.get('WORKERS_CHECKER_MAX_PARALLEL_DEPLOY_PROCESSES') or '2')
WORKERS_CHECKER_ALERT_POD_PENDING_SECONDS = int(os.environ.get('WORKERS_CHECKER_ALERT_POD_PENDING_SECONDS') or '15')
WORKERS_CHECKER_ALERT_POD_MISSING_SECONDS = int(os.environ.get('WORKERS_CHECKER_ALERT_POD_MISSING_SECONDS') or '10')
WORKERS_CHECKER_ALERT_NAMESPACE_TERMINATING_SECONDS = int(os.environ.get('WORKERS_CHECKER_ALERT_NAMESPACE_TERMINATING_SECONDS') or '120')
WORKERS_CHECKER_ALERT_INVALID_WORKER_SECONDS = int(os.environ.get('WORKERS_CHECKER_ALERT_INVALID_WORKER_SECONDS') or '10')

THROTTLER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get('THROTTLER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS') or '1')
# how long to throttle the worker for
THROTTLER_THROTTLE_PERIOD_SECONDS = int(os.environ.get('THROTTLER_THROTTLE_PERIOD_SECONDS') or '600')
# maximum number of requests to enable throttle
THROTTLER_THROTTLE_MAX_REQUESTS = int(os.environ.get('THROTTLER_THROTTLE_MAX_REQUESTS') or '10000000')
# period of time during which the maximum number of requests should be reached to throttle
THROTTLER_CHECK_TTL_SECONDS = int(os.environ.get('THROTTLER_CHECK_TTL_SECONDS') or '60')

MINIO_TENANT_ENDPOINT = os.environ.get('MINIO_TENANT_ENDPOINT')
MINIO_TENANT_ADMIN_USER = os.environ.get('MINIO_TENANT_ADMIN_USER')
MINIO_TENANT_ADMIN_PASSWORD = os.environ.get('MINIO_TENANT_ADMIN_PASSWORD')

KAFKA_STREAMER_BOOTSTRAP_SERVERS = os.environ.get('KAFKA_BOOTSTRAP_SERVERS')
KAFKA_STREAMER_TOPIC = os.environ.get('KAFKA_STREAMER_TOPIC') or 'minio-tenant-main-audit-logs'
KAFKA_STREAMER_POD_NAMESPACE = os.environ.get('KAFKA_MINIO_AUDIT_POD_NAMESPACE') or 'strimzi'
KAFKA_STREAMER_POD_NAME = os.environ.get('KAFKA_MINIO_AUDIT_POD_NAME') or 'minio-audit-kafka-0'
KAFKA_STREAMER_OPERATOR_GROUP_ID = os.environ.get('KAFKA_STREAMER_OPERATOR_GROUP_ID') or f'cwm_worker_operator_{KAFKA_STREAMER_TOPIC}'
KAFKA_STREAMER_CONSUMER_CONFIG = json.loads(os.environ.get('KAFKA_STREAMER_CONSUMER_CONFIG_JSON') or '''{
    "auto.offset.reset": "earliest",
    "enable.auto.commit": false,
    "api.version.request.timeout.ms": 25000
}''')
KAFKA_STREAMER_POLL_TIME_SECONDS = int(os.environ.get('KAFKA_STREAMER_POLL_TIME_SECONDS') or '60')
KAFKA_STREAMER_CONSUMER_POLL_TIMEOUT_SECONDS = float(os.environ.get('KAFKA_STREAMER_CONSUMER_POLL_TIMEOUT_SECONDS') or '1.0')
KAFKA_STREAMER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS = int(os.environ.get('KAFKA_STREAMER_SLEEP_TIME_BETWEEN_ITERATIONS_SECONDS') or '1')
